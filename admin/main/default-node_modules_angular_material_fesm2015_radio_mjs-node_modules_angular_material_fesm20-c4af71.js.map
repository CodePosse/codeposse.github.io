{"version":3,"file":"default-node_modules_angular_material_fesm2015_radio_mjs-node_modules_angular_material_fesm20-c4af71.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2015/radio.mjs","./node_modules/@angular/material/fesm2015/select.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Output, Input, ContentChildren, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/collections';\n\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY,\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true,\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() {\n        return this._selected;\n    }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatRadioGroupBase, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatRadioGroupBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatRadioGroupBase, inputs: { color: \"color\", name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\" }, outputs: { change: \"change\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatRadioGroupBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { change: [{\n                type: Output\n            }], color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }] } });\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioGroup, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatRadioGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatRadioGroup, selector: \"mat-radio-group\", host: { attributes: { \"role\": \"radiogroup\" }, classAttribute: \"mat-radio-group\" }, providers: [\n        MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n        { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n    ], queries: [{ propertyName: \"_radios\", predicate: i0.forwardRef(function () { return MatRadioButton; }), descendants: true }], exportAs: [\"matRadioGroup\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-radio-group',\n                    exportAs: 'matRadioGroup',\n                    providers: [\n                        MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                        { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                    ],\n                    host: {\n                        'role': 'radiogroup',\n                        'class': 'mat-radio-group',\n                    },\n                }]\n        }], propDecorators: { _radios: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatRadioButton), { descendants: true }]\n            }] } });\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._noopAnimations = animationMode === 'NoopAnimations';\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener = _radioDispatcher.listen((id, name) => {\n            if (id !== this.id && name === this.name) {\n                this.checked = false;\n            }\n        });\n    }\n    /** Whether this radio button is checked. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        // As per Material design specifications the selection control radio should use the accent color\n        // palette by default. https://material.io/guidelines/components/selection-controls.html\n        return (this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            (this._providerOverride && this._providerOverride.color) ||\n            'accent');\n    }\n    set color(newValue) {\n        this._color = newValue;\n    }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Triggered when the radio button receives an interaction from the user. */\n    _onInputInteraction(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        if (!this.checked && !this.disabled) {\n            const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n            this.checked = true;\n            this._emitChangeEvent();\n            if (this.radioGroup) {\n                this.radioGroup._controlValueAccessorChangeFn(this.value);\n                if (groupValueChanged) {\n                    this.radioGroup._emitChangeEvent();\n                }\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatRadioButtonBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatRadioButtonBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatRadioButtonBase, inputs: { id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" }, viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatRadioButtonBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: _MatRadioGroupBase }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i2.UniqueSelectionDispatcher }, { type: undefined }, { type: undefined }, { type: undefined }]; }, propDecorators: { id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], checked: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }] } });\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioButton, deps: [{ token: MAT_RADIO_GROUP, optional: true }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }, { token: i2.UniqueSelectionDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_RADIO_DEFAULT_OPTIONS, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component });\nMatRadioButton.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatRadioButton, selector: \"mat-radio-button\", inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { listeners: { \"focus\": \"_inputElement.nativeElement.focus()\" }, properties: { \"class.mat-radio-checked\": \"checked\", \"class.mat-radio-disabled\": \"disabled\", \"class._mat-animation-noopable\": \"_noopAnimations\", \"class.mat-primary\": \"color === \\\"primary\\\"\", \"class.mat-accent\": \"color === \\\"accent\\\"\", \"class.mat-warn\": \"color === \\\"warn\\\"\", \"attr.tabindex\": \"null\", \"attr.id\": \"id\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" }, classAttribute: \"mat-radio-button\" }, exportAs: [\"matRadioButton\"], usesInheritance: true, ngImport: i0, template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputInteraction($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;opacity:0;transition:transform ease 280ms,background-color ease 280ms,opacity linear 1ms 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5);opacity:1;transition:transform ease 280ms,background-color ease 280ms}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-label-content{-webkit-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{opacity:0;position:absolute;top:0;left:0;margin:0;width:100%;height:100%;cursor:inherit;z-index:-1}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], directives: [{ type: i3.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioButton, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-radio-button', inputs: ['disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, exportAs: 'matRadioButton', host: {\n                        'class': 'mat-radio-button',\n                        '[class.mat-radio-checked]': 'checked',\n                        '[class.mat-radio-disabled]': 'disabled',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                        '[class.mat-primary]': 'color === \"primary\"',\n                        '[class.mat-accent]': 'color === \"accent\"',\n                        '[class.mat-warn]': 'color === \"warn\"',\n                        // Needs to be removed since it causes some a11y issues (see #21266).\n                        '[attr.tabindex]': 'null',\n                        '[attr.id]': 'id',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                        // Note: under normal conditions focus shouldn't land on this element, however it may be\n                        // programmatically set, for example inside of a focus trap, in this case we want to forward\n                        // the focus to the native element.\n                        '(focus)': '_inputElement.nativeElement.focus()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputInteraction($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;opacity:0;transition:transform ease 280ms,background-color ease 280ms,opacity linear 1ms 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5);opacity:1;transition:transform ease 280ms,background-color ease 280ms}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-label-content{-webkit-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{opacity:0;position:absolute;top:0;left:0;margin:0;width:100%;height:100%;cursor:inherit;z-index:-1}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatRadioGroup, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_RADIO_GROUP]\n                    }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i2.UniqueSelectionDispatcher }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_RADIO_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatRadioModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioModule, declarations: [MatRadioGroup, MatRadioButton], imports: [MatRippleModule, MatCommonModule], exports: [MatRadioGroup, MatRadioButton, MatCommonModule] });\nMatRadioModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioModule, imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule],\n                    exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                    declarations: [MatRadioGroup, MatRadioButton],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n","import * as i7 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i8 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0,\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)',\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)',\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSelectBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatSelectBase, inputs: { panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i6.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }, { type: i4.NgControl, decorators: [{\n                        type: Self\n                    }, {\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SELECT_SCROLL_STRATEGY]\n                    }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECT_CONFIG]\n                    }] }];\n    }, propDecorators: { trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize &&\n                    this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple\n            ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X\n            : SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - ((this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight);\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"true\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-describedby\": \"_ariaDescribedby || null\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-select-disabled\": \"disabled\", \"class.mat-select-invalid\": \"errorState\", \"class.mat-select-required\": \"required\", \"class.mat-select-empty\": \"empty\", \"class.mat-select-multiple\": \"multiple\" }, classAttribute: \"mat-select\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatSelect },\n        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"], directives: [{ type: i7.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { type: i8.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i8.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i8.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { type: i7.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { type: i8.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                        // value. At some point we should try to switch it back to being `listbox`.\n                        'aria-haspopup': 'true',\n                        'class': 'mat-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        '[class.mat-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatFormFieldModule,\n        MatSelect,\n        MatSelectTrigger,\n        MatOptionModule,\n        MatCommonModule] });\nMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n"],"names":["i0","InjectionToken","forwardRef","EventEmitter","Directive","Output","Input","ContentChildren","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","Attribute","NgModule","i3","mixinDisableRipple","mixinTabIndex","MatRippleModule","MatCommonModule","coerceBooleanProperty","coerceNumberProperty","NG_VALUE_ACCESSOR","ANIMATION_MODULE_TYPE","i1","i2","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","constructor","source","value","MAT_RADIO_GROUP","_MatRadioGroupBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","name","_updateRadioButtonNames","labelPosition","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","disabled","required","ngAfterContentInit","_touch","_radios","forEach","radio","_markForCheck","isAlreadySelected","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","ChangeDetectorRef","ɵdir","type","MatRadioButton","args","selector","exportAs","providers","host","descendants","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","animationMode","_providerOverride","tabIndex","_uniqueId","id","_checked","_removeUniqueSelectionListener","_noopAnimations","listen","newCheckedState","notify","_setDisabled","_color","inputId","focus","options","origin","focusVia","_inputElement","nativeElement","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","_isRippleDisabled","disableRipple","_onInputClick","event","stopPropagation","_onInputInteraction","groupValueChanged","ElementRef","FocusMonitor","UniqueSelectionDispatcher","undefined","ariaLabel","ariaLabelledby","ariaDescribedby","changeDetector","focusMonitor","radioDispatcher","providerOverride","ɵcmp","MatRipple","inputs","encapsulation","None","changeDetection","OnPush","template","styles","decorators","MatRadioModule","ɵmod","ɵinj","imports","exports","declarations","i7","Overlay","CdkConnectedOverlay","OverlayModule","i8","CommonModule","Self","ContentChild","mixinDisabled","mixinErrorState","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","i6","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","CdkScrollableModule","i5","ActiveDescendantKeyManager","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","i4","Validators","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","deps","useFactory","MatSelectChange","_MatSelectMixinBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","_dir","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_panelDoneAnimatingStream","_overlayPanelClass","overlayPanelClass","_focused","controlType","_multiple","_disableOptionCentering","disableOptionCentering","optionSelectionChanges","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","focused","placeholder","_placeholder","stateChanges","next","_d","control","hasValidator","multiple","_selectionModel","ngDevMode","compareWith","_initializeSelection","hasAssigned","_assignValue","_id","_panelDoneAnimating","panelOpen","_initKeyManager","changed","added","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","setAttribute","removeAttribute","_previousControl","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","_isRtl","triggerValue","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","_getPanelTheme","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","_getChangeEvent","setFirstItemActive","length","_getPanelAriaLabelledby","labelId","getLabelId","labelExpression","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","shouldLabelFloat","ViewportRuler","NgZone","ErrorStateMatcher","Directionality","NgForm","FormGroupDirective","NgControl","LiveAnnouncer","MatFormField","panelClass","errorStateMatcher","MatSelect","arguments","_scrollTop","_triggerFontSize","_transformOrigin","_offsetY","_positions","originX","originY","overlayX","overlayY","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","_calculateOverlayOffsetY","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","CdkOverlayOrigin","NgSwitch","NgSwitchCase","NgSwitchDefault","NgClass","animations","customTrigger","MatSelectModule"],"sourceRoot":"webpack:///"}